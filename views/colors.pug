doctype html
html
    head
        title Imp color test
        script(src="https://cdnjs.cloudflare.com/ajax/libs/jquery/1.12.4/jquery.min.js")
        script(src="https://cdn.jsdelivr.net/lodash/4.17.4/lodash.min.js")
        script(src="lib/imp.js")
    body
        h1 Imp color demo
        div
            a(href="index.html") Graph demo
        div
            canvas#colors(width=1900, height=800)

        script(type="text/javascript").
            window.requestAnimationFrame(function () {
                var Color = Imp.Color;
                var ColorGenerator = Imp.ColorGenerator;
                var Palette = Imp.Palette;

                var ctx = $('#colors')[0].getContext('2d');

                for (var il = 0; il < 4; il++) {
                    var last_x = -1.0;

                    for (var ih = 0; ih < 200; ih++) {
                        var cur_x = -1.0;

                        for (var ic = 0; ic < 180; ic++) {
                            var l = 20 + il * 20;
                            var c = ic / 200.0 * 140.0;
                            var h = (ih / 100 - 1) * Math.PI;

                            var rgb = Color.lch_to_linear_rgb(new Color.LCHColor(l, c, h));
                            var lrgb = Color.limit_linear_rgb(rgb);
                            var srgb = Color.linear_rgb_to_srgb(lrgb);

                            if (rgb.r > 1.0 || rgb.r < 0.0 || rgb.g > 1.0 || rgb.g < 0.0 || rgb.b > 1.0 || rgb.b < 0.0) {
                                if (cur_x < 0.0) cur_x = ic;
                            }
                            ctx.fillStyle = Color.srgb_to_rgb_string(srgb);
                            ctx.fillRect(ic, ih + il * 200, 1, 1);
                        }

                        if (cur_x < 0.0) cur_x = 200;

                        if (last_x >= 0.0) {
                            ctx.strokeStyle = 'black';
                            ctx.beginPath();
                            ctx.moveTo(last_x, ih - 1 + il * 200);
                            ctx.lineTo(cur_x, ih + il * 200);
                            ctx.stroke();
                        }

                        last_x = cur_x;
                    }
                }

                for (var il = 0; il < 3; il++) {
                    var v = [];

                    for (var i = 0; i < 25; i++) {
                        var l = 25 + il * 25;
                        var c = 50;
                        var h = (i * 0.618033988749895) * 2.0 * Math.PI;
                        var srgb = Color.lch_to_srgb(new Color.LCHColor(l, c, h));

                        ctx.fillStyle = Color.srgb_to_rgb_string(srgb);
                        v.push(ctx.fillStyle);
                        ctx.fillRect(300 + 50 * il, i * 24, 40, 20);
                    }
                }

                for (var il = 0; il < 3; il++) {
                    var v = [];

                    for (var i = 0; i < 25; i++) {
                        var l = 75;
                        var c = 25 + il * 25;
                        var h = (i * 0.618033988749895) * 2.0 * Math.PI;
                        var srgb = Color.lch_to_srgb(new Color.LCHColor(l, c, h));

                        ctx.fillStyle = Color.srgb_to_rgb_string(srgb);
                        v.push(ctx.fillStyle);
                        ctx.fillRect(500 + 50 * il, i * 24, 40, 20);
                    }
                }

                for (var i = 0; i < 25; i++) {
                    var srgb = Color.rgb_string_to_srgb(Palette.solarized[i % Palette.solarized.length]);
                    var lab = Color.srgb_to_lab(srgb);
                    lab.l += 30;
                    var rgb = Color.lab_to_linear_rgb(lab);
                    var msrgb = Color.linear_rgb_to_srgb(rgb);

                    var lrgb = Color.limit_linear_rgb(rgb);
                    var lsrgb = Color.linear_rgb_to_srgb(lrgb);

                    ctx.fillStyle = Color.srgb_to_rgb_string(srgb);
                    ctx.fillRect(700, i * 24, 50, 20);
                    ctx.fillStyle = Color.srgb_to_rgb_string(lsrgb);
                    ctx.fillRect(750, i * 24, 50, 20);
                }

                var kp = [[-0.2, 2.2], [3.0, -1.2], [6.0, -2.2], [5.5, 2.0]];

                var l_min = 0.2;
                var l_max = 0.8;
                var limit_amount = 0.75;

                var helix_count = 12;
                for (var k = 0; k < 4; k++) {
                    var colours = ColorGenerator.helix(helix_count, kp[k][0], kp[k][1], l_min, l_max, limit_amount)

                    for (var i = 0; i < helix_count; i++) {
                        ctx.fillStyle = Color.srgb_to_rgb_string(colours[i]);
                        ctx.fillRect(900 + k * 60, i * (600 / helix_count), 50, (600 / helix_count) - 5);
                    }
                }

                var golden_helix_count = 24;
                var golden_helix_colours = ColorGenerator.golden_helix(golden_helix_count, l_min, l_max, limit_amount);
                for (var c = 0; c < golden_helix_count; c++) {
                    ctx.fillStyle = Color.srgb_to_rgb_string(golden_helix_colours[c]);
                    ctx.fillRect(1140, c * (600 / golden_helix_count), 50, (600 / golden_helix_count) - 5);
                }
            });
