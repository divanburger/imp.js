doctype html
html
    head
        title Imp test
        link(rel="stylesheet", type="text/css", href="css/main.css")
        link(rel="stylesheet", type="text/css", href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css")
        script(src="https://cdnjs.cloudflare.com/ajax/libs/jquery/1.12.4/jquery.min.js")
        script(src="https://code.jquery.com/ui/1.12.1/jquery-ui.js")
        script(src="https://cdn.jsdelivr.net/lodash/4.17.4/lodash.min.js")
        script(src="lib/imp.js")
        script(src="lib/imp-color.js")
    body
        h1 Imp demo
        div
            a(href="colors.html") Color demo
        .imp.graph#bar_graph
        .imp.graph#area_graph
        .imp.graph#pie_graphs
        .imp.graph#zoom_graph

        script(type="text/javascript").
            var COLORS = {
                forward: 'rgba(39, 163, 221, 1.0)',
                forward_lighter: 'rgba(39, 163, 221, 0.5)',

                positive: 'rgba(97, 166, 86, 0.7)',
                positive_lighter: 'rgba(97, 166, 86, 0.5)',

                caution: 'rgba(225, 123, 36, 0.7)',
                caution_lighter: 'rgba(225, 123, 36, 0.5)',

                negative: 'rgba(218, 63, 72, 1.0)',
                negative_lighter: 'rgba(218, 63, 72, 0.55)',

                neutral: 'rgba(132, 143, 148, 0.2)',
                text: 'rgba(57, 65, 73, 1.0)'
            };

            var Util = Imp.Util;
            var Vec = Imp.Vec;

            ////

            bar_charts = {
                render: function (ctx, data) {
                    var config = _.defaults(ctx.global_config, {
                        label_width: 40,
                        margin: 10
                    });

                    var pos = new Vec(config.margin, config.margin);
                    var size = new Vec(ctx.instance.width - config.margin * 2, ctx.instance.height - config.margin * 2);
                    var graph_width = size.x - config.label_width;
                    ctx.horizontal_grid_with_labels(config.grid, pos, config.label_width, graph_width, size.y);

                    var graph_pos = pos.add(new Vec(config.label_width, 0));
                    var graph_size = new Vec(graph_width, size.y)
                    ctx.horizontal_bar_series(config.cpu, graph_pos, graph_size, data[0]);
                    ctx.line_series(config.memory, graph_pos, graph_size, data[1]);
                }
            };

            var bar_graph = new Imp('#bar_graph', bar_charts.render, [
                    {series_type: Imp.SeriesType.MOVING},
                    {series_type: Imp.SeriesType.MOVING}
                ],
                {
                    cpu: {
                        maximum: 100,
                        bar_color: function (value) {
                            if (value < 50) return COLORS.forward_lighter;
                            if (value < 70) return COLORS.caution_lighter;
                            return COLORS.negative_lighter;
                        },
                        bar_hover_color: function (value) {
                            if (value < 50) return COLORS.forward;
                            if (value < 70) return COLORS.caution;
                            return COLORS.negative;
                        }
                    },
                    memory: {
                        smooth: true,
                        maximum: 100
                    },
                    grid: {
                        maximum: 100,
                        minimum: 0,
                        interval: 25
                    }
                });

            ////

            area_charts = {
                render: function (ctx, data) {
                    var config = _.defaults(ctx.global_config, {
                        label_width: 40,
                        margin: 10
                    });

                    var pos = new Vec(config.margin, config.margin);
                    var size = new Vec(ctx.instance.width - config.margin * 2, ctx.instance.height - config.margin * 2);
                    var graph_width = size.x - config.label_width;
                    ctx.horizontal_grid_with_labels(config.grid, pos, config.label_width, graph_width, size.y);

                    var graph_pos = pos.add(new Vec(config.label_width, 0));
                    var graph_size = new Vec(graph_width, size.y);
                    ctx.area_series(config.network_send, graph_pos, graph_size, data[0]);
                    ctx.area_series(config.network_receive, graph_pos, graph_size, data[1]);
                }
            };

            var area_graph = new Imp('#area_graph', area_charts.render, [
                    {series_type: Imp.SeriesType.MOVING},
                    {series_type: Imp.SeriesType.MOVING}
                ],
                {
                    network_send: {
                        maximum: 100,
                        smooth: true,
                        color: COLORS.forward_lighter,
                        outline_color: COLORS.forward
                    },
                    network_receive: {
                        maximum: 100,
                        smooth: true,
                        color: COLORS.caution_lighter,
                        outline_color: COLORS.caution
                    },
                    grid: {
                        maximum: 100,
                        minimum: 0,
                        interval: 25
                    }
                });

            ////

            pie_charts = {
                render_memory1: function (ctx, config, series, pos, size) {
                    var circle = Util.fit_circle_in_rect(pos, size, new Vec(15, 15));
                    ctx.pie_chart(config, series, circle.pos, circle.radius);
                },

                render_memory2: function (ctx, config, series, pos, size) {
                    ctx.pie_chart_with_side_labels(config, series, pos, size);
                },

                render_cpu: function (ctx, config, series, pos, size) {
                    var circle = Util.fit_circle_in_rect(pos, size, new Vec(15, 15));
                    ctx.pie_ring_chart(config, series, circle.pos, circle.radius);
                    ctx.text_centered_at(config.center_text, Math.round(series.data[0]) + '%', Util.center_of_rect(pos, size));
                },

                render_network: function (ctx, config, series, pos, size) {
                    var circle = Util.fit_circle_in_rect(pos, size, new Vec(15, 15));
                    ctx.pie_ring_chart(config, series, circle.pos, circle.radius);
                },

                render: function (ctx, data) {
                    var width = ctx.instance.width;
                    var part_width = ctx.instance.width / 4;
                    var title_height = 30;
                    var label_height = 30;
                    var height = ctx.instance.height - label_height - title_height;
                    var label_y = ctx.instance.height - label_height * 0.5;

                    ctx.global_config.memory.start_angle += ctx.delta * 0.0005;

                    ctx.text_centered_striked(ctx.global_config.title_text, 'Statistics', new Vec(0, 0), new Vec(width, title_height));

                    pie_charts.render_memory1(ctx, ctx.global_config.memory, data[0], new Vec(0, title_height), new Vec(part_width, height));
                    ctx.text_centered_at(ctx.global_config.label_text, 'Memory usage 1', new Vec(part_width * 0.5, label_y));

                    pie_charts.render_memory2(ctx, ctx.global_config.memory, data[0], new Vec(part_width, title_height), new Vec(part_width, height));
                    ctx.text_centered_at(ctx.global_config.label_text, 'Memory usage 2', new Vec(part_width * 1.5, label_y));

                    pie_charts.render_cpu(ctx, ctx.global_config.cpu, data[1], new Vec(part_width * 2, title_height), new Vec(part_width, height));
                    ctx.text_centered_at(ctx.global_config.label_text, 'CPU usage', new Vec(part_width * 2.5, label_y));

                    pie_charts.render_network(ctx, ctx.global_config.network, data[2], new Vec(part_width * 3, title_height), new Vec(part_width, height));
                    ctx.text_centered_at(ctx.global_config.label_text, 'Network usage', new Vec(part_width * 3.5, label_y));
                }
            };

            var pie_graphs = new Imp('#pie_graphs', pie_charts.render, [
                    {series_type: Imp.SeriesType.STATIC},
                    {series_type: Imp.SeriesType.DYNAMIC},
                    {series_type: Imp.SeriesType.DYNAMIC}
                ],
                {
                    memory: {
                        start_angle: 0,
                        parts: [
                            {name: 'Kernel', color: COLORS.positive_lighter, hover_color: COLORS.positive},
                            {name: 'Driver', color: COLORS.caution_lighter, hover_color: COLORS.caution},
                            {name: 'Used', color: COLORS.forward_lighter, hover_color: COLORS.forward},
                            {name: 'Used (Volatile)', color: COLORS.negative_lighter, hover_color: COLORS.negative},
                            {name: 'Cache', color: COLORS.forward_lighter, hover_color: COLORS.forward},
                            {name: 'Other', color: COLORS.caution_lighter, hover_color: COLORS.caution},
                            {name: 'Free', color: COLORS.neutral, hover_color: COLORS.neutral}
                        ]
                    },
                    cpu: {
                        gap: 0.5,
                        parts: [
                            {color: COLORS.forward_lighter},
                            {color: COLORS.neutral}
                        ],
                        center_text: {
                            text_size: 24,
                            text_font: 'sans',
                            text_color: COLORS.text
                        },
                        inner_radius: function (radius, index) {
                            return index === 0 ? radius * 0.5 : radius * 0.6;
                        },
                        outer_radius: function (radius, index) {
                            return index === 0 ? radius * 1.0 : radius * 0.9;
                        }
                    },
                    network: {
                        gap: 0.5,
                        parts: [
                            {color: COLORS.positive_lighter},
                            {color: COLORS.negative_lighter},
                            {color: COLORS.neutral}
                        ],
                        inner_radius: function (radius, index) {
                            if (index === 0)
                                return radius * 0.5;
                            else if (index === 1)
                                return radius * 0.5;
                            else
                                return radius * 0.7;
                        },
                        outer_radius: function (radius, index) {
                            if (index === 0)
                                return radius * 1.0;
                            else if (index === 1)
                                return radius * 1.0;
                            else
                                return radius * 0.8;
                        }
                    },
                    title_text: {
                        text_size: 16,
                        text_font: 'sans',
                        text_color: '#888'
                    },
                    label_text: {
                        text_size: 14,
                        text_font: 'sans',
                        text_color: '#AAA'
                    }
                });

            zoom_chart = {
                render: function (ctx, data) {
                    var config = _.defaults(ctx.global_config, {
                        label_width: 40,
                        slider_width: 40,
                        margin: 10
                    });

                    var pos = new Vec(config.margin, config.margin);
                    var size = new Vec(ctx.instance.width - config.margin * 2, ctx.instance.height - config.margin * 2);
                    var graph_width = size.x - config.label_width - config.slider_width;
                    ctx.horizontal_grid_with_labels(config.grid, pos, config.label_width, graph_width, size.y);

                    var graph_pos = pos.add(new Vec(config.label_width, 0));
                    var graph_size = new Vec(graph_width, size.y);
                    ctx.horizontal_bar_series(config.data, graph_pos, graph_size, data[0]);

                    var slider_pos = pos.add(new Vec(size.x - config.slider_width, 0.0));
                    var slider_size = new Vec(config.slider_width, size.y);
                    ctx.horizontal_slider(config.data, 'x_zoom_factor', 1.0, 1.0, 4.0, slider_pos, slider_size);
                }
            };

            var zoom_graph = new Imp('#zoom_graph', zoom_chart.render, [
                    {series_type: Imp.SeriesType.STATIC}
                ],
                {
                    data: {
                        maximum: 100,
                        bar_color: COLORS.forward_lighter,
                        bar_hover_color: COLORS.forward
                    },
                    grid: {
                        maximum: 100,
                        minimum: 0,
                        interval: 25
                    }
                });

            ////

            /// Simulation
            sim = {
                offset: 0,
                bar_data: [],
                line_data: [],
                area1_data: [],
                area2_data: [],
                static_data: [],
                random: function (x, seed) {
                    var n = x * 1619 + seed * 6971;
                    n = (n >> 8) ^ n;
                    return ((n * (n * n * 60493 + 19990303) + 1376312589) & 0x7fffffff) / 2147483647.0;
                },
                interpolated_random: function (x, seed) {
                    var i = Math.floor(x);
                    var f = x - i;
                    return sim.random(i, seed) * (1.0 - f) + sim.random(i + 1, seed) * (f);
                },
                octave_random: function (x, seed) {
                    var persistence = 1.0;
                    var factor = 1.0;
                    var octaves = 4;
                    var value = 0.0;
                    var total = 0.0;
                    for (var i = 0; i < octaves; i++) {
                        value += sim.interpolated_random(x * factor, seed + i) * persistence;
                        total += persistence;

                        factor *= 2.0;
                        persistence *= 0.9;
                    }
                    return value / total;
                },
                init: function () {
                    for (var i = 0; i < 20; i++) {
                        sim.offset += 1;
                        sim.bar_data.push(sim.octave_random(sim.offset * 0.2, 6) * 100.0);
                        sim.line_data.push(sim.octave_random(sim.offset * 0.2, 8) * 100.0);
                        sim.area1_data.push(sim.octave_random(sim.offset * 0.2, 10) * 100.0);
                        sim.area2_data.push(sim.octave_random(sim.offset * 0.2, 12) * 200.0 - 50.0);
                        sim.static_data.push(sim.octave_random(sim.offset * 0.2, 14) * 100);
                    }

                    zoom_graph.push_data([{data: sim.static_data}]);

                    setInterval(sim.update, 2000);
                    sim.update();
                },
                update: function () {
                    var cpu_usage = Math.random() * 100.0;

                    var net_send = Math.random() * 80.0;
                    var net_receive = Math.random() * (100.0 - net_send);
                    var net_rest = 100.0 - net_send - net_receive;

                    pie_graphs.push_data([{data: [5, 10, 15, 20, 30, 10, 10]}, {data: [cpu_usage, 100 - cpu_usage]}, {data: [net_send, net_receive, net_rest]}]);

                    sim.offset += 1;

                    sim.bar_data = sim.bar_data.slice();
                    sim.bar_data.splice(0, 1);
                    sim.bar_data.push(sim.octave_random(sim.offset * 0.2, 6) * 100.0);

                    sim.line_data = sim.line_data.slice();
                    sim.line_data.splice(0, 1);
                    sim.line_data.push(sim.octave_random(sim.offset * 0.2, 8) * 100.0);

                    bar_graph.push_data([{offset: sim.offset, data: sim.bar_data}, {
                        offset: sim.offset,
                        data: sim.line_data
                    }]);

                    sim.area1_data = sim.area1_data.slice();
                    sim.area1_data.splice(0, 1);
                    sim.area1_data.push(sim.octave_random(sim.offset * 0.2, 10) * 100.0);
                    sim.area2_data = sim.area2_data.slice();
                    sim.area2_data.splice(0, 1);
                    sim.area2_data.push(sim.octave_random(sim.offset * 0.2, 12) * 200.0 - 50.0);
                    area_graph.push_data([{offset: sim.offset, data: sim.area1_data}, {offset: sim.offset, data: sim.area2_data}]);
                }
            };

            sim.init();