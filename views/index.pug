doctype html
html
    head
        title ImPlot test
        link(rel="stylesheet", type="text/css", href="css/main.css")
        link(rel="stylesheet", type="text/css", href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css")
        script(src="https://cdnjs.cloudflare.com/ajax/libs/jquery/1.12.4/jquery.min.js")
        script(src="https://code.jquery.com/ui/1.12.1/jquery-ui.js")
        script(src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/3.10.1/lodash.min.js")
        script(src="lib/implot.js")
    body
        h1 ImPlot demo
        .implot.graph#bar_graph
        .implot.graph#pie_graphs

        script(type="text/javascript").
            var COLORS = {
                forward: 'rgba(39, 163, 221, 1.0)',
                forward_lighter: 'rgba(39, 163, 221, 0.5)',

                positive: 'rgba(97, 166, 86, 0.7)',
                positive_lighter: 'rgba(97, 166, 86, 0.5)',

                caution: 'rgba(225, 123, 36, 0.7)',
                caution_lighter: 'rgba(225, 123, 36, 0.5)',

                negative: 'rgba(218, 63, 72, 1.0)',
                negative_lighter: 'rgba(218, 63, 72, 0.55)',

                neutral: 'rgba(132, 143, 148, 0.2)',
                text: 'rgba(57, 65, 73, 1.0)'
            };

            var bar_graph = new ImPlot('#bar_graph', new ImPlotDefault(), {
                series: [
                    {
                        name: 'cpu_usage',
                        graph_type: 'horizontal_bar',
                        bar_color: function (value) {
                            if (value < 50) return COLORS.forward_lighter;
                            if (value < 75) return COLORS.caution_lighter;
                            return COLORS.negative_lighter;
                        }
                    },
                    {
                        name: 'memory_usage', graph_type: 'line', smooth: true
                    }
                ],
                grid: {
                    maximum: 100,
                    minimum: 0,
                    interval: 25
                }
            });
            bar_graph.push_data([
               [29, 51, 75, 97, 77, 44, 39, 2, 17, 99, 1, 90, 72, 19, 66, 43, 23, 40, 42, 22, 9, 82, 7, 83, 8, 38, 91, 74, 35, 11, 34, 21, 65, 80, 54, 95, 58, 14, 31, 53, 52, 60, 98, 25, 71, 12, 57, 50, 67, 62],
               [37, 56, 13, 18, 49, 33, 4, 30, 20, 89, 76, 73, 79, 93, 16, 64, 15, 48, 24, 88, 63, 87, 28, 69, 32, 3, 61, 92, 68, 96, 41, 46, 86, 55, 85, 100, 94, 26, 81, 10, 27, 78, 6, 84, 45, 70, 36, 59, 47, 5]
            ]);

            ////

            var PieCharts = function () {
                ImPlotDefault.call(this);
            };

            PieCharts.prototype = _.create(ImPlotDefault.prototype, {
                constructor: PieCharts
            });

            PieCharts.prototype.render_memory = function (config, data, pos, size) {
                var circle = this.fit_circle_in_rect(pos, size, {x: 15, y: 15});
                this.pie_chart(config, data, circle.pos, circle.radius);
            };

            PieCharts.prototype.render_cpu = function (config, data, pos, size) {
                var circle = this.fit_circle_in_rect(pos, size, {x: 15, y: 15});
                this.pie_ring_chart(config, data, circle.pos, circle.radius);
                this.text_centered_at(config.center_text, Math.round(data[0]) + '%', this.center_of_rect(pos, size));
            };

            PieCharts.prototype.render = function (data) {
                var width = this.instance.width;
                var half_width = this.instance.width / 2;
                var title_height = 30;
                var label_height = 30;
                var title_y = title_height * 0.5;
                var height = this.instance.height - label_height - title_height;
                var label_y = this.instance.height - label_height * 0.5;

                this.text_centered_striked(this.global_config.title_text, 'Statistics', {x: 0, y: 0}, {x: width, y: title_height});

                this.render_memory(this.global_config.memory, data[0], {x: 0, y: title_height}, {x: half_width, y: height});
                this.text_centered_at(this.global_config.label_text, 'Memory usage', {x: width * 0.25, y: label_y});

                this.render_cpu(this.global_config.cpu, data[1], {x: half_width, y: title_height}, {x: half_width, y: height});
                this.text_centered_at(this.global_config.label_text, 'CPU usage', {x: width * 0.75, y: label_y});
            };

            var pie_graphs = new ImPlot('#pie_graphs', new PieCharts(), {
                memory: {
                    parts: [
                        {name: 'Used', color: COLORS.positive_lighter, center_distance: 10.0},
                        {name: 'Cache', color: COLORS.forward_lighter},
                        {name: 'Free', color: COLORS.neutral}
                    ]
                },
                cpu: {
                    gap: 0.5,
                    parts:[
                        {color: COLORS.forward_lighter},
                        {color: COLORS.neutral}
                    ],
                    center_text: {
                        text_size: 24,
                        text_font: 'sans',
                        text_color: COLORS.text
                    },
                    inner_radius: function (radius, index) {
                        return index == 0 ? radius * 0.5 : radius * 0.6;
                    },
                    outer_radius: function (radius, index) {
                        return index == 0 ? radius : radius * 0.9;
                    }
                },
                title_text: {
                    text_size: 16,
                    text_font: 'sans',
                    text_color: '#888'
                },
                label_text: {
                    text_size: 14,
                    text_font: 'sans',
                    text_color: '#AAA'
                }
            });

            function simulate_pie_data() {
                var cpu_usage = Math.random() * 100.0;

                pie_graphs.push_data([[45, 35, 20], [cpu_usage, 100 - cpu_usage]]);
            }

            setInterval(simulate_pie_data, 2000);
            simulate_pie_data();